High-level and low-level, as technical terms, are used to classify, describe and point to specific goals of a systematic operation; and are applied in a wide range of contexts, such as, for instance, in domains as widely varied as computer science and business administration.

High-level describe those operations that are more abstract in nature; wherein the overall goals and systemic features are typically more concerned with the wider, macro system as a whole.

Low-level describes more specific individual components of a systematic operation, focusing on the details of rudimentary micro functions rather than macro, complex processes. Low-level classification is typically more concerned with individual components within the system and how they operate.

Features which emerge only at a high level of description are known as epiphenomena.

Due to the nature of complex systems, the high-level description will often be completely different from the low level one; and, therefore, the (different) descriptions that each deliver are consequent upon the level at which each (differently) direct their study.

In computer science, software are typically divided into two types: high-level end-user applications software (such as word processors, databases, video games, etc.), and low-level systems software (such as operation systems, hardware drivers, etc.).

As such, high-level applications typically rely on low-level applications to function.
In terms of programming, a high-level programming language is one which has a relatively high level of abstraction, and manipulates conceptual functions in a structured manner.

A low-level programming language is one like assembly language that contains rudimentary microprocessor commands.